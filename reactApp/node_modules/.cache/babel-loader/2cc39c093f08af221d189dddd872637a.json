{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aviox/Desktop/Renuka/hangman/reactApp/src/Game.js\";\nimport React, { Component } from \"react\";\nconst words = [{\n  Food: [\"PIZZA\", \"BURGER\", \"PATTY\", \"RICE\", \"PULSES\"]\n}, {\n  Fruit: [\"APPLE\", \"BANANA\", \"MANGO\", \"ORANGE\", \"GUAVA\"]\n}, {\n  Country: [\"USA\", \"INDIA\", \"UK\", \"PAKISTAN\", \"JAPAN\"]\n}];\nlet letterstext = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.shuffleWord = () => {\n      let category = words[Math.floor(Math.random() * words.length)];\n      let word = category[Math.floor(Math.random() * category.length)];\n      this.setState({\n        selected_category: category,\n        selected_word: word,\n        timer: 100,\n        gameState: \"start\"\n      });\n    };\n\n    this.saveGame = () => {\n      let param = {\n        selected_category: this.state.selected_category,\n        selected_word: this.state.selected_word,\n        retries: this.state.retries,\n        timer: this.state.timer,\n        letters: this.state.letters,\n        gussedWord: this.state.gussedWord,\n        gameState: this.state.gameState\n      };\n    };\n\n    this.state = {\n      selected_category: {},\n      selected_word: \"\",\n      retries: 5,\n      timer: 1000000,\n      letters: [],\n      gussedWord: [],\n      gameState: \"start\"\n    };\n  }\n\n  componentDidMount() {\n    let category = words[Math.floor(Math.random() * words.length)];\n    let cat_words = Object.values(category);\n    let word = cat_words[0][Math.floor(Math.random() * cat_words[0].length)];\n    this.setState({\n      selected_category: category,\n      selected_word: word,\n      letters: word.split(\"\").map(letter => ({\n        value: letter,\n        guessed: false\n      }))\n    });\n    setInterval(() => {\n      if (this.state.timer > 0) {\n        this.setState({\n          timer: this.state.timer - 1\n        });\n      } else {\n        this.setState({\n          gameState: \"over\"\n        });\n      }\n    }, 1000);\n  }\n\n  onLetterCLick(letter, e) {\n    e.preventDefault();\n    const firstIndex = this.state.selected_word && this.state.selected_word.indexOf(letter);\n\n    if (firstIndex !== -1) {\n      const letters = this.state.letters.map(dat => {\n        if (dat.value === letter) {\n          return Object.assign({}, dat, {\n            guessed: true\n          });\n        }\n\n        return dat;\n      }); // Check if the game has been won\n\n      const gameWon = letters.reduce((winState, currentObject) => {\n        return winState && currentObject.guessed;\n      }, true);\n      this.setState((prevState, props) => {\n        return {\n          letters,\n          gussedWord: [letter].concat(prevState.gussedWord),\n          gameState: gameWon ? \"won\" : \"start\"\n        };\n      });\n    } else {\n      this.setState((prevState, props) => {\n        // Update number of attempts left\n        const guessesLeft = prevState.retries - 1; // Kill the game if needed\n\n        if (guessesLeft === 0) {\n          this.setState({\n            gameState: \"over\"\n          });\n        }\n\n        this.setState({\n          retries: guessesLeft,\n          gussedWord: [letter].concat(prevState.gussedWord)\n        });\n      });\n    }\n\n    this.setState({\n      timer: 100\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-2\",\n        children: \"The Hangman Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-layout\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"far fa-clock\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"time\",\n              children: [\" \", this.state.timer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hang-person\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stand\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ground\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"person\",\n              children: [this.state.retries < 5 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"head\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"body\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true), this.state.retries < 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"leftarm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 44\n              }, this), this.state.retries < 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"rightarm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 44\n              }, this), this.state.retries < 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"leftfoot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 44\n              }, this), this.state.retries < 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"rightfoot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 44\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), this.state.gameState === \"start\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-word\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"newword-btn\",\n              onClick: () => this.shuffleWord(),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-redo-alt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"New Word\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"CATEGORY: \", Object.keys(this.state.selected_category)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), this.state.letters.map((letter, i) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            minLength: 1,\n            maxLength: 1,\n            value: this.state.gameState === \"over\" || letter.guessed ? letter.value : \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), this.state.gameState === \"start\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-wrap\",\n            children: letterstext.map(letter => /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: e => this.state.gussedWord.includes(letter) ? null : this.onLetterCLick(letter, e),\n              className: this.state.gussedWord.includes(letter) ? \"crossLetter LetterBlock\" : \"LetterBlock\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: letter\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save-btn\",\n              onClick: () => this.props.history.push(\"/result\"),\n              children: \"View Records\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [this.state.gameState === \"over\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game_lose_status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"You Lose\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game_win_status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Congratulations! you have won a game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save-btn\",\n              onClick: () => this.saveGame(),\n              children: \"Save Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save-btn\",\n              onClick: () => this.props.history.push(\"/result\"),\n              children: \"View Records\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/aviox/Desktop/Renuka/hangman/reactApp/src/Game.js"],"names":["React","Component","words","Food","Fruit","Country","letterstext","Game","constructor","props","shuffleWord","category","Math","floor","random","length","word","setState","selected_category","selected_word","timer","gameState","saveGame","param","state","retries","letters","gussedWord","componentDidMount","cat_words","Object","values","split","map","letter","value","guessed","setInterval","onLetterCLick","e","preventDefault","firstIndex","indexOf","dat","assign","gameWon","reduce","winState","currentObject","prevState","concat","guessesLeft","render","keys","i","includes","history","push"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nconst words = [\n  {\n    Food: [\"PIZZA\", \"BURGER\", \"PATTY\", \"RICE\", \"PULSES\"],\n  },\n  { Fruit: [\"APPLE\", \"BANANA\", \"MANGO\", \"ORANGE\", \"GUAVA\"] },\n  { Country: [\"USA\", \"INDIA\", \"UK\", \"PAKISTAN\", \"JAPAN\"] },\n];\n\nlet letterstext = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n];\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected_category: {},\n      selected_word: \"\",\n      retries: 5,\n      timer: 1000000,\n      letters: [],\n      gussedWord: [],\n      gameState: \"start\",\n    };\n  }\n\n  componentDidMount() {\n    let category = words[Math.floor(Math.random() * words.length)];\n    let cat_words = Object.values(category);\n    let word = cat_words[0][Math.floor(Math.random() * cat_words[0].length)];\n    this.setState({\n      selected_category: category,\n      selected_word: word,\n      letters: word.split(\"\").map((letter) => ({\n        value: letter,\n        guessed: false,\n      })),\n    });\n    setInterval(() => {\n      if (this.state.timer > 0) {\n        this.setState({ timer: this.state.timer - 1 });\n      } else {\n        this.setState({ gameState: \"over\" });\n      }\n    }, 1000);\n  }\n\n  shuffleWord = () => {\n    let category = words[Math.floor(Math.random() * words.length)];\n    let word = category[Math.floor(Math.random() * category.length)];\n    this.setState({\n      selected_category: category,\n      selected_word: word,\n      timer: 100,\n      gameState: \"start\",\n    });\n  };\n\n  saveGame = () => {\n    let param = {\n      selected_category: this.state.selected_category,\n      selected_word: this.state.selected_word,\n      retries: this.state.retries,\n      timer: this.state.timer,\n      letters: this.state.letters,\n      gussedWord: this.state.gussedWord,\n      gameState: this.state.gameState,\n    };\n  };\n  onLetterCLick(letter, e) {\n    e.preventDefault();\n    const firstIndex =\n      this.state.selected_word && this.state.selected_word.indexOf(letter);\n    if (firstIndex !== -1) {\n      const letters = this.state.letters.map((dat) => {\n        if (dat.value === letter) {\n          return Object.assign({}, dat, {\n            guessed: true,\n          });\n        }\n\n        return dat;\n      });\n\n      // Check if the game has been won\n      const gameWon = letters.reduce((winState, currentObject) => {\n        return winState && currentObject.guessed;\n      }, true);\n\n      this.setState((prevState, props) => {\n        return {\n          letters,\n          gussedWord: [letter].concat(prevState.gussedWord),\n          gameState: gameWon ? \"won\" : \"start\",\n        };\n      });\n    } else {\n      this.setState((prevState, props) => {\n        // Update number of attempts left\n        const guessesLeft = prevState.retries - 1;\n        // Kill the game if needed\n        if (guessesLeft === 0) {\n          this.setState({ gameState: \"over\" });\n        }\n\n        this.setState({\n          retries: guessesLeft,\n          gussedWord: [letter].concat(prevState.gussedWord),\n        });\n      });\n    }\n    this.setState({ timer: 100 });\n  }\n  render() {\n    return (\n      <div className=\"main-area\">\n        <h2 className=\"text-center mb-2\">The Hangman Game</h2>\n        <div className=\"main-layout\">\n          <div className=\"game-display\">\n            <div className=\"timer\">\n              <i className=\"far fa-clock\" />\n              <span className=\"time\"> {this.state.timer}</span>\n            </div>\n            <div className=\"hang-person\">\n              <div className=\"stand\" />\n              <div className=\"ground\" />\n              <div className=\"person\">\n                {this.state.retries < 5 && (\n                  <>\n                    <div className=\"head\" />\n                    <div className=\"body\" />\n                  </>\n                )}\n                {this.state.retries < 4 && <div className=\"leftarm\" />}\n                {this.state.retries < 3 && <div className=\"rightarm\" />}\n                {this.state.retries < 2 && <div className=\"leftfoot\" />}\n                {this.state.retries < 1 && <div className=\"rightfoot\" />}\n              </div>\n            </div>\n            {this.state.gameState === \"start\" && (\n              <div className=\"new-word\">\n                <button\n                  className=\"newword-btn\"\n                  onClick={() => this.shuffleWord()}\n                >\n                  <i className=\"fas fa-redo-alt\" /> <span>New Word</span>\n                </button>\n              </div>\n            )}\n          </div>\n          <div className=\"word-field\">\n            <p>\n              <span>CATEGORY: {Object.keys(this.state.selected_category)}</span>\n            </p>\n            {this.state.letters.map((letter, i) => (\n              <input\n                type=\"text\"\n                minLength={1}\n                maxLength={1}\n                value={\n                  this.state.gameState === \"over\" || letter.guessed\n                    ? letter.value\n                    : \" \"\n                }\n              />\n            ))}\n          </div>\n          {this.state.gameState === \"start\" ? (\n            <>\n              <div className=\"button-wrap\">\n                {letterstext.map((letter) => (\n                  <div\n                    onClick={(e) =>\n                      this.state.gussedWord.includes(letter)\n                        ? null\n                        : this.onLetterCLick(letter, e)\n                    }\n                    className={\n                      this.state.gussedWord.includes(letter)\n                        ? \"crossLetter LetterBlock\"\n                        : \"LetterBlock\"\n                    }\n                  >\n                    <span>{letter}</span>\n                  </div>\n                ))}\n              </div>\n              <div className=\"text-center\">\n                <button\n                  className=\"save-btn\"\n                  onClick={() => this.props.history.push(\"/result\")}\n                >\n                  View Records\n                </button>\n              </div>\n            </>\n          ) : (\n            <>\n              {this.state.gameState === \"over\" ? (\n                <div className=\"game_lose_status\">\n                  <span>You Lose</span>\n                </div>\n              ) : (\n                <div className=\"game_win_status\">\n                  <span>Congratulations! you have won a game</span>\n                </div>\n              )}\n\n              <div className=\"text-center\">\n                <button className=\"save-btn\" onClick={() => this.saveGame()}>\n                  Save Game\n                </button>\n                <button\n                  className=\"save-btn\"\n                  onClick={() => this.props.history.push(\"/result\")}\n                >\n                  View Records\n                </button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}