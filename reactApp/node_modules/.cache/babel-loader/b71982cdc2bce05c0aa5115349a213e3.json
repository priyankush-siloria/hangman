{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aviox/Desktop/Renuka/hangman/reactApp/src/Game.js\";\nimport React, { Component } from \"react\";\nconst words = [{\n  Food: [\"PIZZA\", \"BURGER\", \"PATTY\", \"RICE\", \"PULSES\"]\n}, {\n  Fruit: [\"APPLE\", \"BANANA\", \"MANGO\", \"ORANGE\", \"GUAVA\"]\n}, {\n  Country: [\"USA\", \"INDIA\", \"UK\", \"PAKISTAN\", \"JAPAN\"]\n}];\nlet letterstext = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.shuffleWord = () => {\n      let category = words[Math.floor(Math.random() * words.length)];\n      let word = category[Math.floor(Math.random() * category.length)];\n      this.setState({\n        selected_category: category,\n        selected_word: word,\n        timer: 100,\n        gameState: \"start\"\n      });\n    };\n\n    this.state = {\n      selected_category: {},\n      selected_word: \"\",\n      retries: 5,\n      timer: 100,\n      letters: [],\n      gussedWord: []\n    };\n  }\n\n  componentDidMount() {\n    let category = words[Math.floor(Math.random() * words.length)];\n    let cat_words = Object.values(category);\n    let word = cat_words[0][Math.floor(Math.random() * cat_words[0].length)];\n    console.log(\"word\", word, category, cat_words);\n    this.setState({\n      selected_category: category,\n      selected_word: word,\n      letters: word.split(\"\").map(letter => ({\n        value: letter,\n        guessed: false\n      }))\n    });\n    setInterval(() => this.setState({\n      timer: this.state.timer - 1\n    }), 1000);\n  }\n\n  onLetterCLick(letter, e) {\n    console.log(\"2222222222222\");\n    e.preventDefault();\n    const firstIndex = this.state.selected_word && this.state.selected_word.indexOf(letter);\n\n    if (firstIndex !== -1) {\n      const letters = this.state.letters.map(dat => {\n        if (dat.value === letter) {\n          return Object.assign({}, dat, {\n            guessed: true\n          });\n        }\n\n        return dat;\n      }); // Check if the game has been won\n\n      const gameWon = letters.reduce((winState, currentObject) => {\n        return winState && currentObject.guessed;\n      }, true);\n      this.setState((prevState, props) => {\n        return {\n          letters,\n          gussedWord: [letter].concat(prevState.gussedWord),\n          gameState: gameWon ? \"won\" : \"start\"\n        };\n      });\n    } else {\n      this.setState((prevState, props) => {\n        // Update number of attempts left\n        const guessesLeft = prevState.retries - 1; // Kill the game if needed\n\n        if (guessesLeft === 0) {\n          this.setState({\n            gameState: \"over\"\n          });\n        }\n\n        this.setState({\n          retries: guessesLeft,\n          gussedWord: [letter].concat(prevState.gussedWord)\n        });\n      });\n    }\n\n    this.setState({\n      timer: 100\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-2\",\n        children: \"The Hangman Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-layout\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"far fa-clock\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"time\",\n              children: [\" \", this.state.timer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hang-person\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stand\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ground\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"person\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"head\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"body\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-word\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"newword-btn\",\n              onClick: () => this.shuffleWord(),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-redo-alt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 17\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"New Word\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 51\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"CATEGORY: \", Object.keys(this.state.selected_category)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), this.state.letters.map((letter, i) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            minLength: 1,\n            maxLength: 1,\n            value: this.state.gameState === \"over\" || letter.guessed ? letter.value : \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-wrap\",\n          children: letterstext.map(letter => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: e => this.state.gussedWord.includes(letter) ? null : this.onLetterCLick(letter, e),\n            className: \"LetterBlock\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: this.state.gussedWord.includes(letter) && \"crossLetter\",\n              children: letter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-btn\",\n            children: \"Save Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/aviox/Desktop/Renuka/hangman/reactApp/src/Game.js"],"names":["React","Component","words","Food","Fruit","Country","letterstext","Game","constructor","props","shuffleWord","category","Math","floor","random","length","word","setState","selected_category","selected_word","timer","gameState","state","retries","letters","gussedWord","componentDidMount","cat_words","Object","values","console","log","split","map","letter","value","guessed","setInterval","onLetterCLick","e","preventDefault","firstIndex","indexOf","dat","assign","gameWon","reduce","winState","currentObject","prevState","concat","guessesLeft","render","keys","i","includes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nconst words = [\n  {\n    Food: [\"PIZZA\", \"BURGER\", \"PATTY\", \"RICE\", \"PULSES\"],\n  },\n  { Fruit: [\"APPLE\", \"BANANA\", \"MANGO\", \"ORANGE\", \"GUAVA\"] },\n  { Country: [\"USA\", \"INDIA\", \"UK\", \"PAKISTAN\", \"JAPAN\"] },\n];\n\nlet letterstext = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n];\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected_category: {},\n      selected_word: \"\",\n      retries: 5,\n      timer: 100,\n      letters: [],\n      gussedWord: [],\n    };\n  }\n\n  componentDidMount() {\n    let category = words[Math.floor(Math.random() * words.length)];\n    let cat_words = Object.values(category);\n    let word = cat_words[0][Math.floor(Math.random() * cat_words[0].length)];\n    console.log(\"word\", word, category, cat_words);\n    this.setState({\n      selected_category: category,\n      selected_word: word,\n      letters: word.split(\"\").map((letter) => ({\n        value: letter,\n        guessed: false,\n      })),\n    });\n    setInterval(() => this.setState({ timer: this.state.timer - 1 }), 1000);\n  }\n\n  shuffleWord = () => {\n    let category = words[Math.floor(Math.random() * words.length)];\n    let word = category[Math.floor(Math.random() * category.length)];\n    this.setState({\n      selected_category: category,\n      selected_word: word,\n      timer: 100,\n      gameState: \"start\",\n    });\n  };\n\n  onLetterCLick(letter, e) {\n    console.log(\"2222222222222\");\n    e.preventDefault();\n    const firstIndex =\n      this.state.selected_word && this.state.selected_word.indexOf(letter);\n    if (firstIndex !== -1) {\n      const letters = this.state.letters.map((dat) => {\n        if (dat.value === letter) {\n          return Object.assign({}, dat, {\n            guessed: true,\n          });\n        }\n\n        return dat;\n      });\n\n      // Check if the game has been won\n      const gameWon = letters.reduce((winState, currentObject) => {\n        return winState && currentObject.guessed;\n      }, true);\n\n      this.setState((prevState, props) => {\n        return {\n          letters,\n          gussedWord: [letter].concat(prevState.gussedWord),\n          gameState: gameWon ? \"won\" : \"start\",\n        };\n      });\n    } else {\n      this.setState((prevState, props) => {\n        // Update number of attempts left\n        const guessesLeft = prevState.retries - 1;\n        // Kill the game if needed\n        if (guessesLeft === 0) {\n          this.setState({ gameState: \"over\" });\n        }\n\n        this.setState({\n          retries: guessesLeft,\n          gussedWord: [letter].concat(prevState.gussedWord),\n        });\n      });\n    }\n    this.setState({ timer: 100 });\n  }\n  render() {\n    return (\n      <div className=\"main-area\">\n        <h2 className=\"text-center mb-2\">The Hangman Game</h2>\n        <div className=\"main-layout\">\n          <div className=\"game-display\">\n            <div className=\"timer\">\n              <i className=\"far fa-clock\" />\n              <span className=\"time\"> {this.state.timer}</span>\n            </div>\n            <div className=\"hang-person\">\n              <div className=\"stand\" />\n              <div className=\"ground\" />\n              <div className=\"person\">\n                <div className=\"head\" />\n                <div className=\"body\" />\n              </div>\n            </div>\n            <div className=\"new-word\">\n              <button\n                className=\"newword-btn\"\n                onClick={() => this.shuffleWord()}\n              >\n                <i className=\"fas fa-redo-alt\" /> <span>New Word</span>\n              </button>\n            </div>\n          </div>\n          <div className=\"word-field\">\n            <span>CATEGORY: {Object.keys(this.state.selected_category)}</span>\n            {this.state.letters.map((letter, i) => (\n              <input\n                type=\"text\"\n                minLength={1}\n                maxLength={1}\n                value={\n                  this.state.gameState === \"over\" || letter.guessed\n                    ? letter.value\n                    : \" \"\n                }\n              />\n            ))}\n          </div>\n          <div className=\"button-wrap\">\n            {letterstext.map((letter) => (\n              <div\n                onClick={(e) =>\n                  this.state.gussedWord.includes(letter)\n                    ? null\n                    : this.onLetterCLick(letter, e)\n                }\n                className=\"LetterBlock\"\n              >\n                <span\n                  className={\n                    this.state.gussedWord.includes(letter) && \"crossLetter\"\n                  }\n                >\n                  {letter}\n                </span>\n              </div>\n            ))}\n          </div>\n          <div className=\"text-center\">\n            <button className=\"save-btn\">Save Game</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}